{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import glob\n",
    "import os\n",
    "import numpy as np\n",
    "import pprint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0, 3)\n",
      "(0, 3)\n",
      "(0, 3)\n",
      "(0, 3)\n"
     ]
    }
   ],
   "source": [
    "dfs = []\n",
    "for infile in glob.glob('./data_raw/H24/*.csv'):\n",
    "    df = pd.read_csv(infile, names=['date', 'a', 'b', 'high', 'close', 'low', 'open', 'volume', '1'])\n",
    "    df.index=pd.to_datetime(df.date)\n",
    "    df = df[['high', 'low',  'close']]\n",
    "#     df = df['close']\n",
    "    name = os.path.splitext((os.path.basename(infile)))[0]\n",
    "    if not name.endswith('USD'):\n",
    "        df[['high', 'low',  'close']] = 1 / df[['high', 'low', 'close']]\n",
    "        df.name = name[-3:] + '_' + 'USD'\n",
    "        df[['high']], df[['low']] = df[['low']], df[['high']]\n",
    "#         df[]\n",
    "    else:\n",
    "        df.name = name\n",
    "    dfs.append(df)\n",
    "    print(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n",
      "EUR_USD\n",
      "[]\n",
      "GBP_USD\n",
      "[]\n",
      "CAD_USD\n",
      "[]\n",
      "JPY_USD\n"
     ]
    }
   ],
   "source": [
    "l = []\n",
    "for df in dfs:\n",
    "    l.append(len(df))\n",
    "\n",
    "mi = dfs[np.argmax(l)].index.copy()\n",
    "for i in range(len(dfs)):\n",
    "    name = dfs[i].name\n",
    "    dfs[i] = dfs[i].reindex(mi)\n",
    "    dfs[i] = dfs[i].interpolate()\n",
    "    dfs[i] = dfs[i].fillna(method='bfill', limit=1)\n",
    "    print(np.where(np.isnan(dfs[i]))[0])\n",
    "    dfs[i].name = name\n",
    "    print(dfs[i].name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Currency             EUR_USD                    GBP_USD                    \\\n",
      "Price                   high      low    close     high      low    close   \n",
      "date                                                                        \n",
      "2015-03-31 21:00:00  1.07922  1.07308  1.07856  1.48715  1.48172  1.48626   \n",
      "2015-04-01 05:00:00  1.08000  1.07186  1.07780  1.48715  1.47395  1.47922   \n",
      "2015-04-01 13:00:00  1.07952  1.07272  1.07630  1.48466  1.47649  1.48234   \n",
      "\n",
      "Currency              CAD_USD                       JPY_USD            \\\n",
      "Price                    high       low     close      high       low   \n",
      "date                                                                    \n",
      "2015-03-31 21:00:00  0.790795  0.787823  0.790726  0.008374  0.008323   \n",
      "2015-04-01 05:00:00  0.791039  0.786782  0.790814  0.008351  0.008310   \n",
      "2015-04-01 13:00:00  0.795140  0.789104  0.792230  0.008373  0.008338   \n",
      "\n",
      "Currency                       \n",
      "Price                   close  \n",
      "date                           \n",
      "2015-03-31 21:00:00  0.008349  \n",
      "2015-04-01 05:00:00  0.008343  \n",
      "2015-04-01 13:00:00  0.008351  \n"
     ]
    }
   ],
   "source": [
    "df = pd.concat(dfs, axis=1, keys=[df.name for df in dfs], names=['Currency', 'Price'])\n",
    "# df = pd.concat(dfs, axis=1)\n",
    "print(df[:3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "assert np.isfinite(df.values).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1647, 12)\n",
      "(276, 12)\n"
     ]
    }
   ],
   "source": [
    "# line = [0.18, 0.2, 0.38, 0.4, 0.58, 0.6, 0.78, 0.8, 0.98]\n",
    "\n",
    "# c = []\n",
    "# data = []\n",
    "# # print(df.index)\n",
    "# for l in line:\n",
    "#     c.append(df.index[int(len(df.index)*l)])\n",
    "\n",
    "c1 = df.index[int(len(df.index)*0.6)]\n",
    "c2 = df.index[int(len(df.index)*0.7)]\n",
    "\n",
    "df_train_1 = df[df.index<c1]\n",
    "df_test_1 = df[c1:c2]\n",
    "\n",
    "# df_train_1 = df[df.index<c[0]]\n",
    "# df_test_1 = df[c[0]:c[1]]\n",
    "# df_train_1.to_hdf('./forex_30m_CLOSE_O_1.hf', key='train', mode='w', append=False)\n",
    "# df_test_1.to_hdf('./forex_30m_CLOSE_O_1.hf', key='test', mode='a', append=False)\n",
    "\n",
    "\n",
    "# c = df.index[int(len(df.index)*0.9)]\n",
    "# df_train = df[df.index<c]\n",
    "# df_test = df[df.index>=c]\n",
    "# print(df_train.head)\n",
    "df_train_1.to_hdf('./forex_16H.hf', key='train', mode='w', append=False)\n",
    "df_test_1.to_hdf('./forex_16H.hf', key='test', mode='a', append=False)\n",
    "print(df_train_1.shape)\n",
    "print(df_test_1.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(815, 12)\n",
      "(218, 12)\n"
     ]
    }
   ],
   "source": [
    "c3 = df.index[int(len(df.index)*0.8)]\n",
    "c4 = df.index[int(len(df.index)*0.95)]\n",
    "c5 = df.index[int(len(df.index)*0.99)]\n",
    "\n",
    "df_train_2 = df[c3:c4]\n",
    "df_test_2 = df[c4:c5]\n",
    "\n",
    "#df_train_2.to_hdf('./forex_5f_2.hf', key='train', mode='w', append=False)\n",
    "#df_test_2.to_hdf('./forex_5f_2.hf', key='test', mode='a', append=False)\n",
    "print(df_train_2.shape)\n",
    "print(df_test_2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1629, 12)\n",
      "(1086, 12)\n"
     ]
    }
   ],
   "source": [
    "c6 = df.index[int(len(df.index)*0.5)]\n",
    "c7 = df.index[int(len(df.index)*0.8)]\n",
    "c8 = df.index[int(len(df.index)-1)]\n",
    "\n",
    "df_train_3 = df[c6:c7]\n",
    "df_test_3 = df[c7:c8]\n",
    "\n",
    "#df_train_3.to_hdf('./forex_3f_2H.hf', key='train', mode='w', append=False)\n",
    "#df_test_3.to_hdf('./forex_3f_2H.hf', key='test', mode='a', append=False)\n",
    "print(df_train_3.shape)\n",
    "print(df_test_3.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3256, 12)\n"
     ]
    }
   ],
   "source": [
    "print(df_train_1.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Currency             EUR_USD                    GBP_USD                    \\\n",
      "Price                   high      low    close     high      low    close   \n",
      "date                                                                        \n",
      "2016-12-20 07:00:00  1.03947  1.03810  1.03854  1.23932  1.23758  1.23770   \n",
      "2016-12-20 07:30:00  1.03943  1.03854  1.03916  1.23878  1.23728  1.23776   \n",
      "2016-12-20 08:00:00  1.03980  1.03800  1.03840  1.23885  1.23704  1.23762   \n",
      "2016-12-20 08:30:00  1.03878  1.03798  1.03855  1.23808  1.23714  1.23744   \n",
      "2016-12-20 09:00:00  1.03910  1.03839  1.03906  1.23869  1.23732  1.23869   \n",
      "2016-12-20 09:30:00  1.03906  1.03809  1.03836  1.23875  1.23738  1.23828   \n",
      "2016-12-20 10:00:00  1.03857  1.03756  1.03840  1.23841  1.23584  1.23674   \n",
      "2016-12-20 10:30:00  1.03915  1.03830  1.03898  1.23689  1.23340  1.23428   \n",
      "2016-12-20 11:00:00  1.03912  1.03776  1.03806  1.23654  1.23387  1.23504   \n",
      "2016-12-20 11:30:00  1.03834  1.03777  1.03788  1.23676  1.23400  1.23480   \n",
      "2016-12-20 12:00:00  1.03839  1.03620  1.03620  1.23514  1.23308  1.23314   \n",
      "2016-12-20 12:30:00  1.03655  1.03524  1.03562  1.23448  1.23174  1.23350   \n",
      "2016-12-20 13:00:00  1.03644  1.03543  1.03576  1.23473  1.23154  1.23414   \n",
      "2016-12-20 13:30:00  1.03702  1.03540  1.03698  1.23450  1.23290  1.23418   \n",
      "2016-12-20 14:00:00  1.03698  1.03602  1.03674  1.23418  1.23130  1.23188   \n",
      "2016-12-20 14:30:00  1.03791  1.03637  1.03716  1.23360  1.23150  1.23218   \n",
      "2016-12-20 15:00:00  1.03890  1.03667  1.03804  1.23347  1.23178  1.23297   \n",
      "2016-12-20 15:30:00  1.03894  1.03748  1.03768  1.23564  1.23264  1.23534   \n",
      "2016-12-20 16:00:00  1.03828  1.03718  1.03748  1.23590  1.23376  1.23418   \n",
      "2016-12-20 16:30:00  1.03962  1.03738  1.03901  1.23598  1.23418  1.23592   \n",
      "2016-12-20 17:00:00  1.03980  1.03892  1.03920  1.23614  1.23476  1.23488   \n",
      "2016-12-20 17:30:00  1.03998  1.03885  1.03976  1.23601  1.23422  1.23578   \n",
      "2016-12-20 18:00:00  1.04080  1.03924  1.03940  1.23678  1.23524  1.23566   \n",
      "2016-12-20 18:30:00  1.03993  1.03910  1.03942  1.23686  1.23548  1.23680   \n",
      "2016-12-20 19:00:00  1.03956  1.03900  1.03906  1.23686  1.23540  1.23609   \n",
      "2016-12-20 19:30:00  1.03948  1.03866  1.03886  1.23676  1.23575  1.23658   \n",
      "2016-12-20 20:00:00  1.03912  1.03863  1.03872  1.23708  1.23596  1.23626   \n",
      "2016-12-20 20:30:00  1.03928  1.03858  1.03895  1.23667  1.23617  1.23622   \n",
      "2016-12-20 21:00:00  1.03922  1.03866  1.03880  1.23676  1.23613  1.23661   \n",
      "2016-12-20 21:30:00  1.03920  1.03871  1.03876  1.23699  1.23644  1.23680   \n",
      "...                      ...      ...      ...      ...      ...      ...   \n",
      "2018-01-03 20:30:00  1.20288  1.20103  1.20124  1.35229  1.35098  1.35111   \n",
      "2018-01-03 21:00:00  1.20144  1.20102  1.20144  1.35150  1.35091  1.35141   \n",
      "2018-01-03 21:30:00  1.20158  1.20112  1.20144  1.35182  1.35138  1.35179   \n",
      "2018-01-03 22:00:00  1.20162  1.20118  1.20144  1.35179  1.35114  1.35137   \n",
      "2018-01-03 22:30:00  1.20157  1.20106  1.20114  1.35168  1.35104  1.35126   \n",
      "2018-01-03 23:00:00  1.20140  1.20072  1.20107  1.35151  1.35099  1.35112   \n",
      "2018-01-03 23:30:00  1.20120  1.20064  1.20111  1.35136  1.35084  1.35106   \n",
      "2018-01-04 00:00:00  1.20115  1.20042  1.20066  1.35110  1.35056  1.35083   \n",
      "2018-01-04 00:30:00  1.20101  1.20054  1.20101  1.35122  1.35068  1.35114   \n",
      "2018-01-04 01:00:00  1.20110  1.20048  1.20069  1.35153  1.35076  1.35102   \n",
      "2018-01-04 01:30:00  1.20114  1.20050  1.20075  1.35162  1.35086  1.35120   \n",
      "2018-01-04 02:00:00  1.20192  1.20075  1.20172  1.35202  1.35118  1.35202   \n",
      "2018-01-04 02:30:00  1.20183  1.20147  1.20177  1.35207  1.35176  1.35197   \n",
      "2018-01-04 03:00:00  1.20178  1.20124  1.20136  1.35205  1.35147  1.35158   \n",
      "2018-01-04 03:30:00  1.20166  1.20131  1.20145  1.35192  1.35148  1.35179   \n",
      "2018-01-04 04:00:00  1.20200  1.20145  1.20192  1.35222  1.35177  1.35216   \n",
      "2018-01-04 04:30:00  1.20224  1.20174  1.20180  1.35230  1.35193  1.35200   \n",
      "2018-01-04 05:00:00  1.20198  1.20144  1.20194  1.35200  1.35138  1.35180   \n",
      "2018-01-04 05:30:00  1.20231  1.20179  1.20192  1.35210  1.35167  1.35168   \n",
      "2018-01-04 06:00:00  1.20298  1.20170  1.20298  1.35288  1.35160  1.35232   \n",
      "2018-01-04 06:30:00  1.20382  1.20270  1.20282  1.35306  1.35211  1.35214   \n",
      "2018-01-04 07:00:00  1.20341  1.20254  1.20310  1.35273  1.35154  1.35190   \n",
      "2018-01-04 07:30:00  1.20380  1.20256  1.20285  1.35263  1.35173  1.35180   \n",
      "2018-01-04 08:00:00  1.20326  1.20216  1.20326  1.35297  1.35162  1.35291   \n",
      "2018-01-04 08:30:00  1.20354  1.20244  1.20258  1.35405  1.35272  1.35401   \n",
      "2018-01-04 09:00:00  1.20336  1.20251  1.20320  1.35458  1.35342  1.35409   \n",
      "2018-01-04 09:30:00  1.20462  1.20298  1.20430  1.35502  1.35381  1.35446   \n",
      "2018-01-04 10:00:00  1.20496  1.20415  1.20490  1.35475  1.35402  1.35440   \n",
      "2018-01-04 10:30:00  1.20556  1.20485  1.20513  1.35554  1.35434  1.35484   \n",
      "2018-01-04 11:00:00  1.20560  1.20467  1.20511  1.35518  1.35440  1.35463   \n",
      "\n",
      "Currency              CAD_USD                       JPY_USD            \\\n",
      "Price                    high       low     close      high       low   \n",
      "date                                                                    \n",
      "2016-12-20 07:00:00  0.745924  0.745356  0.745773  0.008495  0.008478   \n",
      "2016-12-20 07:30:00  0.745818  0.745468  0.745612  0.008488  0.008479   \n",
      "2016-12-20 08:00:00  0.745734  0.745301  0.745379  0.008484  0.008462   \n",
      "2016-12-20 08:30:00  0.745423  0.745062  0.745062  0.008466  0.008457   \n",
      "2016-12-20 09:00:00  0.745440  0.745062  0.745390  0.008477  0.008457   \n",
      "2016-12-20 09:30:00  0.745434  0.744890  0.744934  0.008479  0.008468   \n",
      "2016-12-20 10:00:00  0.744940  0.744369  0.744757  0.008477  0.008465   \n",
      "2016-12-20 10:30:00  0.744979  0.744657  0.744846  0.008484  0.008471   \n",
      "2016-12-20 11:00:00  0.745723  0.744801  0.745590  0.008485  0.008478   \n",
      "2016-12-20 11:30:00  0.745912  0.745590  0.745701  0.008487  0.008479   \n",
      "2016-12-20 12:00:00  0.745746  0.745068  0.745068  0.008482  0.008468   \n",
      "2016-12-20 12:30:00  0.745401  0.744979  0.745312  0.008470  0.008462   \n",
      "2016-12-20 13:00:00  0.746102  0.745312  0.746063  0.008468  0.008459   \n",
      "2016-12-20 13:30:00  0.746369  0.745634  0.746313  0.008475  0.008461   \n",
      "2016-12-20 14:00:00  0.746687  0.746102  0.746235  0.008473  0.008465   \n",
      "2016-12-20 14:30:00  0.746597  0.745890  0.746280  0.008471  0.008460   \n",
      "2016-12-20 15:00:00  0.747250  0.746269  0.746726  0.008482  0.008463   \n",
      "2016-12-20 15:30:00  0.747250  0.746503  0.746753  0.008481  0.008466   \n",
      "2016-12-20 16:00:00  0.747563  0.746753  0.747122  0.008472  0.008465   \n",
      "2016-12-20 16:30:00  0.748038  0.747060  0.747541  0.008491  0.008464   \n",
      "2016-12-20 17:00:00  0.748469  0.747395  0.748089  0.008492  0.008482   \n",
      "2016-12-20 17:30:00  0.748145  0.747731  0.748145  0.008492  0.008482   \n",
      "2016-12-20 18:00:00  0.748492  0.747831  0.747949  0.008500  0.008487   \n",
      "2016-12-20 18:30:00  0.748111  0.747708  0.747719  0.008493  0.008484   \n",
      "2016-12-20 19:00:00  0.747719  0.747138  0.747339  0.008496  0.008486   \n",
      "2016-12-20 19:30:00  0.747954  0.747317  0.747865  0.008498  0.008487   \n",
      "2016-12-20 20:00:00  0.748145  0.747641  0.747859  0.008491  0.008486   \n",
      "2016-12-20 20:30:00  0.748223  0.747787  0.748161  0.008491  0.008484   \n",
      "2016-12-20 21:00:00  0.748357  0.747893  0.747910  0.008489  0.008486   \n",
      "2016-12-20 21:30:00  0.748346  0.747898  0.747999  0.008488  0.008484   \n",
      "...                       ...       ...       ...       ...       ...   \n",
      "2018-01-03 20:30:00  0.798085  0.797245  0.797537  0.008896  0.008889   \n",
      "2018-01-03 21:00:00  0.797664  0.797181  0.797219  0.008893  0.008888   \n",
      "2018-01-03 21:30:00  0.797760  0.797124  0.797754  0.008889  0.008887   \n",
      "2018-01-03 22:00:00  0.797754  0.797486  0.797563  0.008890  0.008887   \n",
      "2018-01-03 22:30:00  0.797664  0.797283  0.797296  0.008888  0.008884   \n",
      "2018-01-03 23:00:00  0.797575  0.797251  0.797397  0.008886  0.008880   \n",
      "2018-01-03 23:30:00  0.797397  0.796991  0.797003  0.008881  0.008879   \n",
      "2018-01-04 00:00:00  0.797213  0.796686  0.796718  0.008880  0.008872   \n",
      "2018-01-04 00:30:00  0.796991  0.796673  0.796927  0.008875  0.008871   \n",
      "2018-01-04 01:00:00  0.796991  0.796464  0.796603  0.008874  0.008869   \n",
      "2018-01-04 01:30:00  0.797029  0.796533  0.796889  0.008871  0.008867   \n",
      "2018-01-04 02:00:00  0.797397  0.796876  0.797283  0.008876  0.008871   \n",
      "2018-01-04 02:30:00  0.797467  0.797175  0.797461  0.008878  0.008874   \n",
      "2018-01-04 03:00:00  0.797639  0.797130  0.797188  0.008878  0.008874   \n",
      "2018-01-04 03:30:00  0.797544  0.797143  0.797524  0.008877  0.008874   \n",
      "2018-01-04 04:00:00  0.797849  0.797461  0.797817  0.008878  0.008875   \n",
      "2018-01-04 04:30:00  0.798008  0.797754  0.797868  0.008880  0.008877   \n",
      "2018-01-04 05:00:00  0.797906  0.797664  0.797843  0.008878  0.008876   \n",
      "2018-01-04 05:30:00  0.798116  0.797836  0.797995  0.008879  0.008876   \n",
      "2018-01-04 06:00:00  0.798697  0.797836  0.798626  0.008888  0.008876   \n",
      "2018-01-04 06:30:00  0.799003  0.798301  0.798371  0.008890  0.008884   \n",
      "2018-01-04 07:00:00  0.798697  0.798123  0.798416  0.008887  0.008882   \n",
      "2018-01-04 07:30:00  0.798837  0.798155  0.798582  0.008887  0.008882   \n",
      "2018-01-04 08:00:00  0.798786  0.798403  0.798512  0.008882  0.008875   \n",
      "2018-01-04 08:30:00  0.798786  0.798429  0.798588  0.008882  0.008877   \n",
      "2018-01-04 09:00:00  0.798697  0.798187  0.798480  0.008881  0.008878   \n",
      "2018-01-04 09:30:00  0.798709  0.798193  0.798371  0.008886  0.008878   \n",
      "2018-01-04 10:00:00  0.798748  0.798110  0.798735  0.008887  0.008881   \n",
      "2018-01-04 10:30:00  0.798984  0.798703  0.798773  0.008886  0.008882   \n",
      "2018-01-04 11:00:00  0.798971  0.798429  0.798786  0.008885  0.008881   \n",
      "\n",
      "Currency                       \n",
      "Price                   close  \n",
      "date                           \n",
      "2016-12-20 07:00:00  0.008481  \n",
      "2016-12-20 07:30:00  0.008482  \n",
      "2016-12-20 08:00:00  0.008464  \n",
      "2016-12-20 08:30:00  0.008462  \n",
      "2016-12-20 09:00:00  0.008477  \n",
      "2016-12-20 09:30:00  0.008469  \n",
      "2016-12-20 10:00:00  0.008474  \n",
      "2016-12-20 10:30:00  0.008481  \n",
      "2016-12-20 11:00:00  0.008479  \n",
      "2016-12-20 11:30:00  0.008481  \n",
      "2016-12-20 12:00:00  0.008470  \n",
      "2016-12-20 12:30:00  0.008468  \n",
      "2016-12-20 13:00:00  0.008463  \n",
      "2016-12-20 13:30:00  0.008471  \n",
      "2016-12-20 14:00:00  0.008468  \n",
      "2016-12-20 14:30:00  0.008469  \n",
      "2016-12-20 15:00:00  0.008476  \n",
      "2016-12-20 15:30:00  0.008469  \n",
      "2016-12-20 16:00:00  0.008465  \n",
      "2016-12-20 16:30:00  0.008485  \n",
      "2016-12-20 17:00:00  0.008486  \n",
      "2016-12-20 17:30:00  0.008490  \n",
      "2016-12-20 18:00:00  0.008487  \n",
      "2016-12-20 18:30:00  0.008487  \n",
      "2016-12-20 19:00:00  0.008496  \n",
      "2016-12-20 19:30:00  0.008489  \n",
      "2016-12-20 20:00:00  0.008486  \n",
      "2016-12-20 20:30:00  0.008487  \n",
      "2016-12-20 21:00:00  0.008488  \n",
      "2016-12-20 21:30:00  0.008484  \n",
      "...                       ...  \n",
      "2018-01-03 20:30:00  0.008892  \n",
      "2018-01-03 21:00:00  0.008889  \n",
      "2018-01-03 21:30:00  0.008888  \n",
      "2018-01-03 22:00:00  0.008887  \n",
      "2018-01-03 22:30:00  0.008885  \n",
      "2018-01-03 23:00:00  0.008881  \n",
      "2018-01-03 23:30:00  0.008880  \n",
      "2018-01-04 00:00:00  0.008873  \n",
      "2018-01-04 00:30:00  0.008874  \n",
      "2018-01-04 01:00:00  0.008870  \n",
      "2018-01-04 01:30:00  0.008871  \n",
      "2018-01-04 02:00:00  0.008876  \n",
      "2018-01-04 02:30:00  0.008877  \n",
      "2018-01-04 03:00:00  0.008875  \n",
      "2018-01-04 03:30:00  0.008876  \n",
      "2018-01-04 04:00:00  0.008878  \n",
      "2018-01-04 04:30:00  0.008877  \n",
      "2018-01-04 05:00:00  0.008878  \n",
      "2018-01-04 05:30:00  0.008876  \n",
      "2018-01-04 06:00:00  0.008885  \n",
      "2018-01-04 06:30:00  0.008886  \n",
      "2018-01-04 07:00:00  0.008884  \n",
      "2018-01-04 07:30:00  0.008882  \n",
      "2018-01-04 08:00:00  0.008877  \n",
      "2018-01-04 08:30:00  0.008879  \n",
      "2018-01-04 09:00:00  0.008879  \n",
      "2018-01-04 09:30:00  0.008885  \n",
      "2018-01-04 10:00:00  0.008882  \n",
      "2018-01-04 10:30:00  0.008884  \n",
      "2018-01-04 11:00:00  0.008881  \n",
      "\n",
      "[12870 rows x 12 columns]\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_hdf(\"/Users/nver/PycharmProjects/v20-python-samples/src/instrument/csvDocu/30M/forex_3f_30m.hf\",key='train')\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
